"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3835],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return d}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(r),d=o,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||a;return r?t.createElement(m,l(l({ref:n},s),{},{components:r})):t.createElement(m,l({ref:n},s))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9223:function(e,n,r){r.r(n),r.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return f}});var t=r(7462),o=r(3366),a=(r(7294),r(3905)),l=["components"],i={title:"94. \u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386/Binary Tree Inorder Traversal",tags:["\u529b\u6263\u7b97\u6cd5","\u7b80\u5355","\u6811"]},c=void 0,u={unversionedId:"leetcode/a94",id:"leetcode/a94",title:"94. \u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386/Binary Tree Inorder Traversal",description:"",source:"@site/docs/leetcode/a94.md",sourceDirName:"leetcode",slug:"/leetcode/a94",permalink:"/leo/docs/leetcode/a94",tags:[{label:"\u529b\u6263\u7b97\u6cd5",permalink:"/leo/docs/tags/\u529b\u6263\u7b97\u6cd5"},{label:"\u7b80\u5355",permalink:"/leo/docs/tags/\u7b80\u5355"},{label:"\u6811",permalink:"/leo/docs/tags/\u6811"}],version:"current",frontMatter:{title:"94. \u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386/Binary Tree Inorder Traversal",tags:["\u529b\u6263\u7b97\u6cd5","\u7b80\u5355","\u6811"]},sidebar:"leetcode",previous:{title:"55.\u8df3\u8dc3\u6e38\u620f/Jump Game",permalink:"/leo/docs/leetcode/a55"}},s={},f=[],p={toc:f};function d(e){var n=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    var result = [];\n    var curr = root;\n\n    function traver(node) {\n        if (node) {\n            traver(node.left);\n           if (node.val !== null) {\n                result.push(node.val);\n            }\n\n            traver(node.right);\n        }\n\n    }\n\n    traver(curr);\n\n    return result;\n};\n\n")))}d.isMDXComponent=!0}}]);