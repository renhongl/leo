"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5801],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=l(t),f=o,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||a;return t?r.createElement(d,u(u({ref:n},s),{},{components:t})):r.createElement(d,u({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,u=new Array(a);u[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,u[1]=i;for(var l=2;l<a;l++)u[l]=t[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7995:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),u=["components"],i={title:"1.\u4e24\u6570\u76f8\u52a0/Two Sum",tags:["\u529b\u6263\u7b97\u6cd5","\u7b80\u5355","\u5b57\u5178"]},c=void 0,l={unversionedId:"\u529b\u6263\u7b97\u6cd5\u9898/\u54c8\u5e0c\u5b57\u5178-\u5806/a1",id:"\u529b\u6263\u7b97\u6cd5\u9898/\u54c8\u5e0c\u5b57\u5178-\u5806/a1",title:"1.\u4e24\u6570\u76f8\u52a0/Two Sum",description:"",source:"@site/docs/\u529b\u6263\u7b97\u6cd5\u9898/\u54c8\u5e0c\u5b57\u5178-\u5806/a1.md",sourceDirName:"\u529b\u6263\u7b97\u6cd5\u9898/\u54c8\u5e0c\u5b57\u5178-\u5806",slug:"/\u529b\u6263\u7b97\u6cd5\u9898/\u54c8\u5e0c\u5b57\u5178-\u5806/a1",permalink:"/leo/docs/\u529b\u6263\u7b97\u6cd5\u9898/\u54c8\u5e0c\u5b57\u5178-\u5806/a1",tags:[{label:"\u529b\u6263\u7b97\u6cd5",permalink:"/leo/docs/tags/\u529b\u6263\u7b97\u6cd5"},{label:"\u7b80\u5355",permalink:"/leo/docs/tags/\u7b80\u5355"},{label:"\u5b57\u5178",permalink:"/leo/docs/tags/\u5b57\u5178"}],version:"current",frontMatter:{title:"1.\u4e24\u6570\u76f8\u52a0/Two Sum",tags:["\u529b\u6263\u7b97\u6cd5","\u7b80\u5355","\u5b57\u5178"]},sidebar:"tutorialSidebar",previous:{title:"\u529b\u6263\u7b97\u6cd5\u9898/LeetCode",permalink:"/leo/docs/leet-code"},next:{title:"94. \u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386/Binary Tree Inorder Traversal",permalink:"/leo/docs/\u529b\u6263\u7b97\u6cd5\u9898/\u56fe-\u6811/a1"}},s={},p=[],m={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,u);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const map = new Map();\n    for (let i = 0, len = nums.length; i < len; i++) {\n        if (map.has(target - nums[i])) {\n            return [map.get(target - nums[i]), i];\n        }\n        map.set(nums[i], i);\n    }\n};\n\n")))}f.isMDXComponent=!0}}]);