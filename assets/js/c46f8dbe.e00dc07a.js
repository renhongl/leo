"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1373],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return d}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=t.createContext({}),c=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(u.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,m=p["".concat(u,".").concat(d)]||p[d]||f[d]||a;return n?t.createElement(m,i(i({ref:r},s),{},{components:n})):t.createElement(m,i({ref:r},s))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5426:function(e,r,n){n.r(r),n.d(r,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return f}});var t=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"94. \u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386/Binary Tree Inorder Traversal",tags:["\u529b\u6263\u7b97\u6cd5","\u7b80\u5355","\u6811"]},u=void 0,c={unversionedId:"\u529b\u6263\u7b97\u6cd5\u9898/\u56fe-\u6811/a1",id:"\u529b\u6263\u7b97\u6cd5\u9898/\u56fe-\u6811/a1",title:"94. \u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386/Binary Tree Inorder Traversal",description:"",source:"@site/docs/\u529b\u6263\u7b97\u6cd5\u9898/\u56fe-\u6811/a1.md",sourceDirName:"\u529b\u6263\u7b97\u6cd5\u9898/\u56fe-\u6811",slug:"/\u529b\u6263\u7b97\u6cd5\u9898/\u56fe-\u6811/a1",permalink:"/leo/docs/\u529b\u6263\u7b97\u6cd5\u9898/\u56fe-\u6811/a1",tags:[{label:"\u529b\u6263\u7b97\u6cd5",permalink:"/leo/docs/tags/\u529b\u6263\u7b97\u6cd5"},{label:"\u7b80\u5355",permalink:"/leo/docs/tags/\u7b80\u5355"},{label:"\u6811",permalink:"/leo/docs/tags/\u6811"}],version:"current",frontMatter:{title:"94. \u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386/Binary Tree Inorder Traversal",tags:["\u529b\u6263\u7b97\u6cd5","\u7b80\u5355","\u6811"]},sidebar:"tutorialSidebar",previous:{title:"1.\u4e24\u6570\u76f8\u52a0/Two Sum",permalink:"/leo/docs/\u529b\u6263\u7b97\u6cd5\u9898/\u54c8\u5e0c\u5b57\u5178-\u5806/a1"},next:{title:"55.\u8df3\u8dc3\u6e38\u620f/Jump Game",permalink:"/leo/docs/\u529b\u6263\u7b97\u6cd5\u9898/\u641c\u7d22-\u52a8\u6001\u89c4\u5212/a1"}},s={},f=[],p={toc:f};function d(e){var r=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    var result = [];\n    var curr = root;\n\n    function traver(node) {\n        if (node) {\n            traver(node.left);\n           if (node.val !== null) {\n                result.push(node.val);\n            }\n\n            traver(node.right);\n        }\n\n    }\n\n    traver(curr);\n\n    return result;\n};\n\n")))}d.isMDXComponent=!0}}]);